{"version":3,"sources":["scripts/main.js"],"names":["Game","game2048","grid","score","updateScore","addNumber","randomPosition","positionNumberArr","newNumber","emptyCells","lastCell","i","length","j","getRandomPosition","Math","floor","getRandomNumber","updateGrid","checkGameStatus","map","row","slice","grid1","grid2","direction","originalGrid","copyGrid","move","mergeNumber","gridChanged","isGridEqual","moveUp","moveDown","moveLeft","moveRight","mergeUp","mergeDown","mergeLeft","mergeRight","cellValue","cellId","cellElement","document","getElementById","className","classList","add","innerText","k","flat","includes","winMessage","querySelector","hideMessage","remove","areMovesAvailable","loseMessage","horizontalMerge","verticalMerge","arrMessages","contains","startButton","random","randomNumber","addEventListener","event","key","action"],"mappings":"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","file":"main.710d27ae.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor() {\n    this.grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n    this.score = 0;\n\n    this.updateScore();\n    this.addNumber();\n    this.addNumber();\n  }\n\n  addNumber() {\n    let randomPosition;\n    let positionNumberArr;\n    let newNumber;\n    let emptyCells = 0;\n    const lastCell = [];\n\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 0) {\n          emptyCells++;\n          lastCell[0] = [i, j];\n        }\n      }\n    }\n\n    if (emptyCells > 1) {\n      do {\n        randomPosition = getRandomPosition();\n        positionNumberArr = Math.floor(randomPosition / 4);\n        newNumber = getRandomNumber();\n      } while (this.grid[positionNumberArr][randomPosition % 4] !== 0);\n\n      this.grid[positionNumberArr][randomPosition % 4] = newNumber;\n\n      this.updateGrid();\n    }\n\n    if (emptyCells === 1) {\n      this.grid[lastCell[0][0]][lastCell[0][1]] = getRandomNumber();\n      this.updateGrid();\n    } else {\n      this.checkGameStatus();\n    }\n  }\n\n  copyGrid() {\n    return this.grid.map(row => row.slice());\n  }\n\n  isGridEqual(grid1, grid2) {\n    for (let i = 0; i < grid1.length; i++) {\n      for (let j = 0; j < grid1[i].length; j++) {\n        if (grid1[i][j] !== grid2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  action(direction) {\n    const originalGrid = this.copyGrid();\n\n    this.move(direction);\n    this.mergeNumber(direction);\n\n    const gridChanged = !this.isGridEqual(originalGrid, this.grid);\n\n    this.updateScore();\n    this.move(direction);\n\n    if (gridChanged) {\n      this.addNumber();\n    }\n    this.checkGameStatus();\n  }\n\n  move(direction) {\n    switch (true) {\n      case direction === 'up':\n        this.moveUp();\n        break;\n\n      case direction === 'down':\n        this.moveDown();\n        break;\n\n      case direction === 'left':\n        this.moveLeft();\n        break;\n\n      case direction === 'right':\n        this.moveRight();\n        break;\n    }\n  }\n\n  mergeNumber(direction) {\n    switch (true) {\n      case direction === 'up':\n        this.mergeUp();\n        break;\n\n      case direction === 'down':\n        this.mergeDown();\n        break;\n\n      case direction === 'left':\n        this.mergeLeft();\n        break;\n\n      case direction === 'right':\n        this.mergeRight();\n        break;\n    }\n  }\n\n  updateGrid() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        const cellValue = this.grid[i][j];\n        const cellId = `field-cell-${i * 4 + j}`;\n        const cellElement = document.getElementById(cellId);\n\n        cellElement.className = 'field-cell';\n\n        if (cellValue !== 0) {\n          cellElement.classList.add(`field-cell--${cellValue}`);\n          cellElement.innerText = cellValue;\n        } else {\n          cellElement.innerText = '';\n        }\n      }\n    }\n  }\n\n  updateScore() {\n    const element = document.getElementById('game-score');\n\n    element.innerText = this.score;\n  }\n\n  mergeRight() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = this.grid[i].length - 1; j >= 0; j--) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i][j - 1];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i][j - 1] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  mergeLeft() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j <= this.grid[i].length - 1; j++) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i][j + 1];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i][j + 1] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  mergeDown() {\n    for (let i = this.grid.length - 1; i >= 1; i--) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i - 1][j];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i - 1][j] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  mergeUp() {\n    for (let i = 0; i < this.grid.length - 1; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] !== 0) {\n          const currentCell = this.grid[i][j];\n          const nextCell = this.grid[i + 1][j];\n\n          if (currentCell === nextCell) {\n            this.grid[i][j] *= 2;\n            this.grid[i + 1][j] = 0;\n            this.score += this.grid[i][j];\n          }\n        }\n      }\n    }\n    this.updateGrid();\n  }\n\n  moveUp() {\n    for (let j = 0; j < this.grid[0].length; j++) {\n      for (let i = 1; i < this.grid.length; i++) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = i; k > 0; k--) {\n            if (this.grid[k - 1][j] === 0) {\n              this.grid[k - 1][j] = this.grid[k][j];\n              this.grid[k][j] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveDown() {\n    for (let j = 0; j < this.grid[0].length; j++) {\n      for (let i = this.grid.length - 2; i >= 0; i--) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = i; k < this.grid.length - 1; k++) {\n            if (this.grid[k + 1][j] === 0) {\n              this.grid[k + 1][j] = this.grid[k][j];\n              this.grid[k][j] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveLeft() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 1; j < this.grid.length; j++) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = j; k > 0; k--) {\n            if (this.grid[i][k - 1] === 0) {\n              this.grid[i][k - 1] = this.grid[i][k];\n              this.grid[i][k] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  moveRight() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = this.grid.length - 2; j >= 0; j--) {\n        if (this.grid[i][j] !== 0) {\n          for (let k = j; k < this.grid.length - 1; k++) {\n            if (this.grid[i][k + 1] === 0) {\n              this.grid[i][k + 1] = this.grid[i][k];\n              this.grid[i][k] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  checkGameStatus() {\n    if (this.grid.flat().includes(2048)) {\n      const winMessage = document.querySelector('.message-win');\n\n      this.hideMessage();\n\n      winMessage.classList.remove('hidden');\n    } else {\n      const movesAvailable = this.areMovesAvailable();\n\n      if (!movesAvailable) {\n        const loseMessage = document.querySelector('.message-lose');\n\n        this.hideMessage();\n\n        loseMessage.classList.remove('hidden');\n      }\n    }\n  }\n\n  areMovesAvailable() {\n    for (const row of this.grid) {\n      if (row.includes(0)) {\n        return true;\n      }\n    }\n\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length - 1; j++) {\n        const horizontalMerge = this.grid[i][j] === this.grid[i][j + 1];\n        const verticalMerge = this.grid[j][i] === this.grid[j + 1][i];\n\n        if (horizontalMerge || verticalMerge) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hideMessage() {\n    const winMessage = document.querySelector('.message-win');\n    const startMessage = document.querySelector('.message-start');\n    const loseMessage = document.querySelector('.message-lose');\n\n    const arrMessages = [winMessage, startMessage, loseMessage];\n\n    for (let i = 0; i < arrMessages.length; i++) {\n      if (!arrMessages[i].classList.contains('hidden')) {\n        arrMessages[i].classList.add('hidden');\n      }\n    }\n  }\n}\n\nconst startButton = document.getElementById('button-start');\n\nlet game2048;\n\nstartButton.addEventListener('click', function() {\n  game2048 = new Game();\n  game2048.hideMessage();\n\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n});\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', event => {\n  switch (true) {\n    case event.key === 'ArrowUp':\n      game2048.action('up');\n      break;\n\n    case event.key === 'ArrowDown':\n      game2048.action('down');\n      break;\n\n    case event.key === 'ArrowLeft':\n      game2048.action('left');\n      break;\n\n    case event.key === 'ArrowRight':\n      game2048.action('right');\n      break;\n  }\n});\n\nfunction getRandomPosition() {\n  return Math.floor(Math.random() * 15) + 0;\n}\n\nfunction getRandomNumber() {\n  const randomNumber = Math.floor(Math.random() * 10) + 1;\n\n  return (randomNumber <= 9) ? 2 : 4;\n}\n"]}